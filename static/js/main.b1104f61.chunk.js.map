{"version":3,"sources":["model/storage.js","components/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["storage","set","key","value","localStorage","setItem","JSON","stringify","get","parse","getItem","remove","removeItem","TodoList","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","addData","e","keyCode","temp","state","list","push","data","refs","checked","setState","removeData","splice","handleChecked","handleClear","clear","_this2","react_default","a","createElement","action","for","ref","id","type","onKeyDown","className","map","onChange","bind","href","onClick","React","Component","App","components_TodoList","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b1104f61.chunk.js","sourcesContent":["var storage={\r\n    set(key,value){\r\n        localStorage.setItem(key,JSON.stringify(value));\r\n\r\n    },\r\n    get(key){\r\n        return JSON.parse(localStorage.getItem(key))\r\n    },\r\n    remove(key){\r\n        localStorage.removeItem(key)\r\n    }\r\n}\r\nexport default storage;","import React from 'react'\r\nimport '../assets/css/index.css'\r\nimport storage from '../model/storage'\r\n\r\nclass TodoList extends React.Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            list:[]\r\n        }\r\n\r\n    }\r\n    addData= (e)=>{\r\n        if(e.keyCode=== 13){\r\n            let temp=this.state.list\r\n            temp.push(\r\n                {\r\n                    data:this.refs.data.value,\r\n                    checked:false\r\n                })\r\n            this.setState({\r\n                list:temp\r\n            })\r\n            this.refs.data.value=''\r\n\r\n            storage.set('todolist',temp)\r\n        }\r\n\r\n    }\r\n    removeData= (key)=>{\r\n        let temp=this.state.list\r\n        temp.splice(key,1)\r\n        this.setState({\r\n            list:temp\r\n        })\r\n        storage.set('todolist',temp)\r\n    }\r\n    handleChecked= (key)=>{\r\n        let temp=this.state.list\r\n        temp[key].checked=!temp[key].checked\r\n        this.setState({\r\n            list:temp\r\n        })\r\n        storage.set('todolist',temp)\r\n    }\r\n    handleClear =()=>{\r\n        localStorage.clear();\r\n        this.setState({\r\n            list:[]\r\n        })\r\n\r\n    }\r\n    componentDidMount(){\r\n        let list = storage.get('todolist')\r\n        if(list){\r\n            this.setState({\r\n                list:list\r\n            })\r\n        }\r\n\r\n    }\r\n    render(){\r\n        return(\r\n            <div>\r\n            <header>\r\n                <section>\r\n                    <form action=\"\"></form>\r\n                    <label for=\"indata\">ReactTodo</label>\r\n                    <input ref=\"data\" id=\"indata\" type=\"text\" onKeyDown={this.addData}/>\r\n                </section>\r\n            </header>\r\n                <section className=\"listContainer\">\r\n                    <h2 className=\"title\" >待办事项：</h2>\r\n                        {\r\n                            this.state.list.map((value,key)=>{\r\n                                if(!value.checked) {\r\n                                    return (\r\n                                        <div key={key} className=\"unFinList\">\r\n                                            <input type=\"checkbox\" checked={value.checked} onChange={this.handleChecked.bind(this,key)}/>\r\n                                            <span>{value.data}</span>\r\n                                            <a href=\"#\" onClick={this.removeData.bind(this, key)}>x</a>\r\n                                        </div>\r\n\r\n                                    )\r\n                                }\r\n                            })\r\n                        }\r\n                    <hr/>\r\n                    <h2 className=\"title\">已完成事项：</h2>\r\n                        {\r\n                            this.state.list.map((value,key)=>{\r\n                                if(value.checked) {\r\n                                    return (\r\n                                        <div key={key} className=\"finList\">\r\n                                            <input type=\"checkbox\" checked={value.checked} onChange={this.handleChecked.bind(this,key)}/>\r\n                                            <span>{value.data}</span>\r\n                                            <a href=\"#\" onClick={this.removeData.bind(this, key)}>x</a>\r\n                                        </div>\r\n\r\n                                    )\r\n                                }\r\n                            })\r\n                        }\r\n                </section>\r\n                <footer>\r\n                    Copyright © 2018 Trolife |\r\n                    <a href=\"#\" onClick={this.handleClear}> clear</a>\r\n                </footer>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default TodoList;","import React, { Component } from 'react';\n\nimport TodoList from './components/TodoList'\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n          <TodoList></TodoList>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './assets/css/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}